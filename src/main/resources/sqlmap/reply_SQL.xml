<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.brownie.reply.service.impl.ReplyMapper">

	<select id="boardReplyCnt" resultType="kr.co.brownie.reply.service.ReplyVO">
		SELECT
			BOARDSEQ,
			REPLYCNT,
			BEFORESEQ,
			BEFOREDATE,
			BEFORECNT,
			AFTERSEQ,
			AFTERDATE,
			AFTERCNT
		FROM
			(
			SELECT
				BOARDSEQ,
				REPLYCNT,
				LAG(BOARDSEQ) OVER(ORDER BY BOARDSEQ) AS BEFORESEQ,
				LAG(INDATE) OVER(ORDER BY BOARDSEQ) AS BEFOREDATE,
				LAG(REPLYCNT) OVER(ORDER BY BOARDSEQ) AS BEFORECNT,
				LEAD(BOARDSEQ) OVER(ORDER BY BOARDSEQ) AS AFTERSEQ,
				LEAD(INDATE) OVER(ORDER BY BOARDSEQ) AS AFTERDATE,
				LEAD(REPLYCNT) OVER(ORDER BY BOARDSEQ) AS AFTERCNT
			FROM
				(
				SELECT
					BB.BOARD_SEQ BOARDSEQ,
                	BB.IN_DATE INDATE,
			        NVL(RE.CNT,0) REPLYCNT
	        	FROM
	        		BROWNIE_BOARD BB
	        	LEFT JOIN
	        		(
	        		SELECT
	        			BOARD_SEQ,
	        			COUNT(REPLY_SEQ) CNT
			      	FROM
			      		BROWNIE_BOARD_REPLY
			      	GROUP BY
			      		BOARD_SEQ
			      	) RE
		     	ON (BB.BOARD_SEQ = RE.BOARD_SEQ)
		     	WHERE UPPER(BB.BOARD_KIND)='FREE'
		     	ORDER BY BOARDSEQ
				)
			)
		WHERE BOARDSEQ = ${boardSeq}
	</select>

	<select id="replyOnBoard" resultType="kr.co.brownie.reply.service.ReplyVO">
   		SELECT
			RE.REPLY_SEQ AS REPLYSEQ,
			RE.REPLY_CONTENT AS REPLYCONTENT,
			RE.IN_DATE AS INDATE,
			RE.IN_USER_ID AS INUSERID,
			RE.UP_DATE AS MODDATE,
			RE.UP_USER_ID AS UPUSERID,
			RE.BOARD_SEQ AS BOARDSEQ,
			RE.HEAD_REPLY_SEQ AS HEADREPLYSEQ,
			RE.STATUS AS STATUS,
            BU.NICK_NAME AS NICKNAME,
            NVL(LH.LCNT,0) AS LIKECNT,
            NVL(LH.HCNT,0) AS HATECNT
		FROM
			BROWNIE_USER BU,
            BROWNIE_BOARD_REPLY RE
        LEFT JOIN
        	(
            SELECT REPLY_SEQ, "0" AS LCNT, "1" AS HCNT
            FROM (SELECT REPLY_SEQ, KIND
            FROM BROWNIE_BOARD_REPLY_LIKE)
            PIVOT ( COUNT(*) FOR KIND IN (0, 1))
            ) LH
        ON
        	(LH.REPLY_SEQ = RE.REPLY_SEQ)
		WHERE
			RE.IN_USER_ID = BU.IN_USER_ID
        AND
			RE.HEAD_REPLY_SEQ = 0
		AND
			RE.BOARD_SEQ = #{boardSeq}
		ORDER BY RE.IN_DATE
	</select>

	<select id="replyOnReply" resultType="kr.co.brownie.reply.service.ReplyVO">
		SELECT
			RE.REPLY_SEQ as replySeq,
			RE.REPLY_CONTENT as replyContent,
			RE.IN_DATE as inDate,
			RE.IN_USER_ID as inUserId,
			RE.UP_DATE as modDate,
			RE.UP_USER_ID as upUserId,
			RE.BOARD_SEQ as boardSeq,
			RE.HEAD_REPLY_SEQ as headReplySeq,
			RE.STATUS AS STATUS,
            BU.NICK_NAME AS nickName
		FROM
			BROWNIE_BOARD_REPLY RE, BROWNIE_USER BU
		WHERE
			RE.IN_USER_ID = BU.IN_USER_ID
		AND
			HEAD_REPLY_SEQ = #{replySeq}
	</select>

	<update id="modReply">
		UPDATE BROWNIE_BOARD_REPLY
		SET
			REPLY_CONTENT = #{replyContent},
			UP_DATE = SYSDATE,
			UP_USER_ID = #{upUserId}
		WHERE
			REPLY_SEQ = #{replySeq}
	</update>

	<update id="delHadReReply">
		UPDATE BROWNIE_BOARD_REPLY
		SET
			REPLY_CONTENT = #{replyContent},
			UP_DATE = SYSDATE,
			UP_USER_ID = #{upUserId},
			STATUS = 'D'
		WHERE
			REPLY_SEQ = #{replySeq}
	</update>

	<delete id="delReply">
		DELETE FROM BROWNIE_BOARD_REPLY
		WHERE
			IN_USER_ID = #{inUserId}
		AND
			REPLY_SEQ = #{replySeq}
	</delete>

	<select id="selectReplyStance" parameterType="hashMap" resultType="kr.co.brownie.reply.service.ReplyVO">
		SELECT
			REPLY_SEQ as replySeq,
			KIND as likeHateKind,
			IN_DATE as inDate,
			IN_USER_ID as inUserId,
			UP_DATE as modDate,
			UP_USER_ID as upUserId
		FROM
			BROWNIE_BOARD_REPLY_LIKE
        WHERE
        	REPLY_SEQ = #{replySeq}
        AND
        	IN_USER_ID = #{inUserId}
	</select>

	<delete id="deleteReplyStance" parameterType="hashMap">
		DELETE FROM BROWNIE_BOARD_REPLY_LIKE
        WHERE
        	REPLY_SEQ = #{replySeq}
        AND
        	IN_USER_ID = #{inUserId}
	</delete>

	<update id="updateReplyStance" parameterType="hashMap">
  	 	MERGE INTO
			BROWNIE_BOARD_REPLY_LIKE
		USING DUAL
		ON
			(reply_SEQ = #{replySeq} AND IN_USER_ID = #{inUserId})
		WHEN MATCHED THEN
			UPDATE SET
				UP_USER_ID = #{inUserId},
				KIND = #{kind}
		WHEN NOT MATCHED THEN
			INSERT (
				REPLY_SEQ,
				KIND,
				IN_DATE,
				IN_USER_ID,
				UP_DATE,
				UP_USER_ID
			) VALUES(
				#{replySeq},
				#{kind},
				SYSDATE,
				#{inUserId},
				SYSDATE,
				#{inUserId}
			)
	</update>

	<select id="replyLHCnt" resultType="kr.co.brownie.reply.service.ReplyVO">
		SELECT REPLY_SEQ, "0" as LIKECNT, "1" as HATECNT
		FROM (SELECT REPLY_SEQ, KIND
		FROM BROWNIE_BOARD_REPLY_LIKE)
		PIVOT (
		    COUNT(*)
		    FOR KIND
		    IN (0, 1)
		)
		WHERE REPLY_SEQ = #{replySeq}
	</select>


	<insert id="replyToBoard">
		INSERT INTO BROWNIE_BOARD_REPLY
			(
				REPLY_SEQ,
				REPLY_CONTENT,
				IN_DATE,
				IN_USER_ID,
				UP_DATE,
				UP_USER_ID,
				BOARD_SEQ,
				HEAD_REPLY_SEQ,
				STATUS
			)
			VALUES
			(
				REPLY_SEQ.NEXTVAL,
				#{replyContent},
				SYSDATE,
				#{inUserId},
				SYSDATE,
				#{inUserId},
				#{boardSeq},
				#{headReplySeq},
				'y'
			)
	</insert>

	<insert id="replyToReply">
		INSERT INTO BROWNIE_BOARD_REPLY
			(
				REPLY_SEQ,
				REPLY_CONTENT,
				IN_DATE,
				IN_USER_ID,
				UP_DATE,
				UP_USER_ID,
				BOARD_SEQ,
				HEAD_REPLY_SEQ,
				STATUS
			)
		VALUES
			(
				REPLY_SEQ.NEXTVAL,
				#{replyContent},
				SYSDATE,
				#{inUserId},
				SYSDATE,
				#{inUserId},
				#{boardSeq},
				#{headReplySeq},
				'y'
			)
	</insert>


</mapper>